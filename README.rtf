<<<<<<< HEAD
{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\fnil\fcharset0 Consolas;\f1\fnil\fcharset0 Consolas-Bold;}
{\colortbl;\red255\green255\blue255;\red27\green31\blue34;\red10\green77\blue204;}
{\*\expandedcolortbl;;\cssrgb\c14118\c16078\c18039;\cssrgb\c1176\c40000\c83922;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl360\qc\partightenfactor0

\f0\fs30 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 README\
The Machine Learning Health Predictions:\
Using multi-tiered application to train and visualize data\
\
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \

\f1\b Contents
\f0\b0 \
Introduction\
System Requirements & Downloads\
Documentation of the Machine Learning Health Predictions\
Release Notes\
Bug Reports and Feedback\
Contents of the Application\
Redistribution\
\
||||||| merged common ancestors
{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\qc\partightenfactor0

\f0\fs24 \cf0 README\
\pard\pardeftab720\ri0\sl480\slmult1\qc\partightenfactor0
\cf0 The Machine Learning Health Predictions:\
Using multi-tiered application to train and visualize data\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\

\b\fs28 Contents
\b0\fs24 \
Introduction\
System Requirements & Installation\
Documentation of the Machine Learning Health Predictions\
Release Notes\
Bug Reports and Feedback\
Contents of the Application\
Runtime Environment\
Redistribution\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\b\fs28 \cf0 \
Introduction
\fs24 \

\b0 Thank you for downloading the codes for the graphic user interface that trains, tests, and predicts diabetes cases. The code is developed for the Java programming language.\
=======
README
The Machine Learning Health Predictions:
Using multi-tiered application to train and visualize data

>>>>>>> ed1af3935fd35a5cc3ba277ba8d29db650c18b05

<<<<<<< HEAD
\f1\b Introduction
\f0\b0 \
Thank you for downloading the codes for the graphic user interface that trains, tests, and predicts diabetes cases. The code is developed for the Java programming language.\
\
||||||| merged common ancestors
\b \
=======
Contents
Introduction
System Requirements & Downloads
Documentation of the Machine Learning Health Predictions
Release Notes
Bug Reports and Feedback
Contents of the Application
Redistribution
>>>>>>> ed1af3935fd35a5cc3ba277ba8d29db650c18b05

<<<<<<< HEAD
\f1\b System Requirements & Downloads
\f0\b0 \
Reading from the database requires the downloading of the Weka API, which is available at {\field{\*\fldinst{HYPERLINK "https://www.cs.waikato.ac.nz/ml/weka/"}}{\fldrslt \cf3 \strokec3 https://www.cs.waikato.ac.nz/ml/weka/}} . \
Modification of the DatabaseUtils.props file is needed to reflect your database connection. Instructions for this step is available at {\field{\*\fldinst{HYPERLINK "https://weka.wikispaces.com/Use+WEKA+in+your+Java+code"}}{\fldrslt \cf3 \strokec3 https://weka.wikispaces.com/Use+WEKA+in+your+Java+code}} .\
\
||||||| merged common ancestors
\fs28 System Requirements & Installation
\fs24 \
=======
Introduction
Thank you for downloading the codes for the graphic user interface that trains, tests, and predicts diabetes cases. The code is developed for the Java programming language.
>>>>>>> ed1af3935fd35a5cc3ba277ba8d29db650c18b05

<<<<<<< HEAD
\f1\b Documentation of the Machine Learning Health Predictions
\f0\b0 \
There are four packages: CheckThisFile, JTablePackage, WekaDBFilePackage, and addSample packages . \
CheckThisFile Package\
The \'93CheckThisFile\'94 package reads correct answers from a text file, and place these key values into an arraylist (ReadFile.java). The CompareTwoArrays.java class compares arrays from the ReadFile.java class against the test results taken from the Evaluate.java class (that is located in the WekaDBFilePackage package). In addition, the CompareTwoArrays.java class also calculates the accuracy of the evaluation. Tables displaying the results from using any of the three algorithms, SVM, Neural Network, and Decision Tree are contained in PrepareTableSVM, PrepareTableNN, and PrepareTableTree classes, respectively. \
\
||||||| merged common ancestors
\b0 Reading from the database requires the downloading of the Weka API, which is available at {\field{\*\fldinst{HYPERLINK "https://www.cs.waikato.ac.nz/ml/weka/"}}{\fldrslt https://www.cs.waikato.ac.nz/ml/weka/}} . \
Modification of the DatabaseUtils.props file is needed to reflect your database connection. Instructions for this step is available at {\field{\*\fldinst{HYPERLINK "https://weka.wikispaces.com/Use+WEKA+in+your+Java+code"}}{\fldrslt https://weka.wikispaces.com/Use+WEKA+in+your+Java+code}} .
\b \
=======
System Requirements & Downloads
Reading from the database requires the downloading of the Weka API, which is available at https://www.cs.waikato.ac.nz/ml/weka/ . 
Modification of the DatabaseUtils.props file is needed to reflect your database connection. Instructions for this step is available at https://weka.wikispaces.com/Use+WEKA+in+your+Java+code .
>>>>>>> ed1af3935fd35a5cc3ba277ba8d29db650c18b05

<<<<<<< HEAD
\f1\b JTablePackage Package
\f0\b0 \
The \'93JTablePackage\'94 package contains the DisplayJTable.java class that orchestrates the calling of logics from many other classes (Evaluate.java, MakeFile.java, Predict.java, Connect.java, and DisplayAddSample.java, CompareTwoArrays.java, and CheckThisFile.java classes). The main purpose of the DisplayJTable.java class is to render the graphic user interface using logics from the aforementioned classes. The TableQuery.java class eatable JDBC connection with the schema called \'93diabetes\'94 in MySQL on port 3306 of localhost. Methods in this TableQuery.java class displays datasets that were used for training and testing, which are provided by the TableTrain.java TableTest.java classes, respectively.\
\

\f1\b WekaDBFilePackage Package
\f0\b0 \
WekaDBFilePackage contains the main class, called Driver15.java. In addition, it also contains DatabaseQueries.java class that returns the fields of a sample (person being tested for diabetes) and getInstanceDataFromDatabase.java class that gets instances from the database. The UtilsWeka.java class creates instances from data written in .arff files.\
\
The Evaluate.java class builds classifiers for each algorithm and returns the results as array lists. \
\
Because Weka is designed to use data written in .arff file format, the usage of data from a database in our case must be reformatted from database to .arff file format. This is achieved by taking instances from the database, then appending the header that is formatted to match .arff file format described by Weka. In our case the conversion of database instances to meet the .arff file format is written in the MakeFile.java class. \
\
An important function of machine learning is the ability to predict the outcome of data with unknown outcome; this is done in the Predict.java class. Prediction is made for the last sample added to be tested.\
\

\f1\b AddSample Package
\f0\b0 \
AddSample package connects to the JDBC diabetes schema (Connect.java class) to allow the function of adding new samples to be tested. The user interface is created in DisplayAddSample.java class. The SampleForDiabetes.java class is the entity class containing fields and getters and setters for the sample. \
\
Documentation of the java code is provided within each class file. \
\

\f1\b Release Notes
\f0\b0 \
Please check the comment section on GitHub for release information.\
\

\f1\b Bug Reports and Feedback
\f0\b0 \
Comments are welcomed to help improve this code. Please collaborate! \
\

\f1\b Contents of the Application
\f0\b0 \
This application contains:\
\
Source Code: Four packages described above\
	CheckThisFile package contains the following .java files: \
		CompareTwoArrays\
		PrepareTableNN\
		PrepareTableSVM\
		PrepareTableTree\
		ReadFile\
 	JTablePackage contains the following .java files:  \
		 DisplayJTable\
		TableQuery\
		TableTest\
		TableTrain\
	WekaDBFilePackage contains the following .java files:  \
		DatabaseQueries\
		Driver15\
		Evaluate\
		InstancesFromDatabase\
		MakeFile\
		Predict\
		UtilsWeka\
	AddSample package contains the following .java files: \
		Connect\
		DisplayAddSample\
		SampleForDiabetes\
The .arff files that include:\
	checkForAccuracy: contains answer key to be checked against the evaluated test results taken from the Evaluate.java class\
	combined: file with all training data that were used\
	combinedTest: file with all testing data that were used\
	fromDatabase:file containing training data from the database after the header had been appended, which is processed in the MakeFile.java class\
	fromDatabaseTest:file containing testing data from the database after the header had been appended, which is processed in the MakeFile.java class\
	headerDiabetes: contains information on formatted data type and their variable names in java files and database schema	\
\
Driver libraries \
 	Driver to MySQL \
	Driver to Weka \
\
||||||| merged common ancestors
\fs28 \
Documentation of the Machine Learning Health Predictions
\fs24 \

\b0 There are four packages: CheckThisFile, JTablePackage, WekaDBFilePackage, and addSample packages . \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\qc\partightenfactor0
\cf0 CheckThisFile Package\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 The \'93CheckThisFile\'94 package reads correct answers from a text file, and place these key values into an arraylist (ReadFile.java). The CompareTwoArrays.java class compares arrays from the ReadFile.java class against the test results taken from the Evaluate.java class (that is located in the WekaDBFilePackage package). In addition, the CompareTwoArrays.java class also calculates the accuracy of the evaluation. Tables displaying the results from using any of the three algorithms, SVM, Neural Network, and Decision Tree are contained in PrepareTableSVM, PrepareTableNN, and PrepareTableTree classes, respectively. \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\qc\partightenfactor0
\cf0 JTablePackage Package\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 The \'93JTablePackage\'94 package contains the DisplayJTable.java class that orchestrates the calling of logics from many other classes (Evaluate.java, MakeFile.java, Predict.java, Connect.java, and DisplayAddSample.java, CompareTwoArrays.java, and CheckThisFile.java classes). The main purpose of the DisplayJTable.java class is to render the graphic user interface using logics from the aforementioned classes. The TableQuery.java class eatable JDBC connection with the schema called \'93diabetes\'94 in MySQL on port 3306 of localhost. Methods in this TableQuery.java class displays datasets that were used for training and testing, which are provided by the TableTrain.java TableTest.java classes, respectively.\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\qc\partightenfactor0
\cf0 WekaDBFilePackage Package\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 WekaDBFilePackage contains the main class, called Driver15.java. In addition, it also contains DatabaseQueries.java class that returns the fields of a sample (person being tested for diabetes) and getInstanceDataFromDatabase.java class that gets instances from the database. The UtilsWeka.java class creates instances from data written in .arff files.\
\
The Evaluate.java class builds classifiers for each algorithm and returns the results as array lists. \
\
Because Weka is designed to use data written in .arff file format, the usage of data from a database in our case must be reformatted from database to .arff file format. This is achieved by taking instances from the database, then appending the header that is formatted to match .arff file format described by Weka. In our case the conversion of database instances to meet the .arff file format is written in the MakeFile.java class. \
\
An important function of machine learning is the ability to predict the outcome of data with unknown outcome; this is done in the Predict.java class. Prediction is made for the last sample added to be tested.\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\qc\partightenfactor0
\cf0 AddSample Package\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 AddSample package connects to the JDBC diabetes schema (Connect.java class) to allow the function of adding new samples to be tested. The user interface is created in DisplayAddSample.java class. The SampleForDiabetes.java class is the entity class containing fields and getters and setters for the sample. \
\
Documentation of the java code is provided within each class file. 
\b \
\

\fs28 Release Notes
\fs24 \

\b0 Please check the comment section on GitHub for release information.
\b \
\

\fs28 Bug Reports and Feedback
\fs24 \

\b0 Comments are welcomed to help improve this code. Please collaborate! 
\b \
\

\fs28 Contents of the Application
\fs24 \

\b0 This application contains:\
\

\b Souce Code: Four packages described above
\b0 \
	CheckThisFile contains the following .java files: \
		CompareTwoArrays\
		PrepareTableNN\
		PrepareTableSVM\
		PrepareTableTree\
		ReadFile\
 	JTablePackage contains the following .java files:  \
		 DisplayJTable\
		TableQuery\
		TableTest\
		TableTrain\
	WekaDBFilePackage contains the following .java files:  \
		DatabaseQueries\
		Driver15\
		Evaluate\
		InstancesFromDatabase\
		MakeFile\
		Predict\
		UtilsWeka\
	AddSample packages contains the following .java files: 
\b \
		
\b0 Connect\
		DisplayAddSample\

\b 		
\b0 SampleForDiabetes
\b \
The .arff files that includes:\

\b0 	checkForAccuracy: contains answer key to be checked against the evaluated test results taken from the Evaluate.java class\
	combined: file with all training data that were used\
	combinedTest: file with all testing data that were used\
	fromDatabase:file containing training data from the database after the header had been appended, which happened in the MakeFile.java class\
	fromDatabaseTest:file containing testing data from the database after the header had been appended, which happened in the MakeFile.java class\
	headerDiabetes: contains information on formatted data type and their variable names in java files and database schema
\b 	\
\
Driver libraries \

\b0  	Driver to MySQL \
	Driver to Weka 
\b \
\
=======
Documentation of the Machine Learning Health Predictions
There are four packages: CheckThisFile, JTablePackage, WekaDBFilePackage, and addSample packages . 
CheckThisFile Package
The “CheckThisFile” package reads correct answers from a text file, and place these key values into an arraylist (ReadFile.java). The CompareTwoArrays.java class compares arrays from the ReadFile.java class against the test results taken from the Evaluate.java class (that is located in the WekaDBFilePackage package). In addition, the CompareTwoArrays.java class also calculates the accuracy of the evaluation. Tables displaying the results from using any of the three algorithms, SVM, Neural Network, and Decision Tree are contained in PrepareTableSVM, PrepareTableNN, and PrepareTableTree classes, respectively. 

JTablePackage Package
The “JTablePackage” package contains the DisplayJTable.java class that orchestrates the calling of logics from many other classes (Evaluate.java, MakeFile.java, Predict.java, Connect.java, and DisplayAddSample.java, CompareTwoArrays.java, and CheckThisFile.java classes). The main purpose of the DisplayJTable.java class is to render the graphic user interface using logics from the aforementioned classes. The TableQuery.java class eatable JDBC connection with the schema called “diabetes” in MySQL on port 3306 of localhost. Methods in this TableQuery.java class displays datasets that were used for training and testing, which are provided by the TableTrain.java TableTest.java classes, respectively.

WekaDBFilePackage Package
WekaDBFilePackage contains the main class, called Driver15.java. In addition, it also contains DatabaseQueries.java class that returns the fields of a sample (person being tested for diabetes) and getInstanceDataFromDatabase.java class that gets instances from the database. The UtilsWeka.java class creates instances from data written in .arff files.

The Evaluate.java class builds classifiers for each algorithm and returns the results as array lists. 

Because Weka is designed to use data written in .arff file format, the usage of data from a database in our case must be reformatted from database to .arff file format. This is achieved by taking instances from the database, then appending the header that is formatted to match .arff file format described by Weka. In our case the conversion of database instances to meet the .arff file format is written in the MakeFile.java class. 

An important function of machine learning is the ability to predict the outcome of data with unknown outcome; this is done in the Predict.java class. Prediction is made for the last sample added to be tested.

AddSample Package
AddSample package connects to the JDBC diabetes schema (Connect.java class) to allow the function of adding new samples to be tested. The user interface is created in DisplayAddSample.java class. The SampleForDiabetes.java class is the entity class containing fields and getters and setters for the sample. 

Documentation of the java code is provided within each class file. 

Release Notes
Please check the comment section on GitHub for release information.

Bug Reports and Feedback
Comments are welcomed to help improve this code. Please collaborate! 

Contents of the Application
This application contains:

Source Code: Four packages described above
	CheckThisFile package contains the following .java files: 
		CompareTwoArrays
		PrepareTableNN
		PrepareTableSVM
		PrepareTableTree
		ReadFile
 	JTablePackage contains the following .java files:  
		 DisplayJTable
		TableQuery
		TableTest
		TableTrain
	WekaDBFilePackage contains the following .java files:  
		DatabaseQueries
		Driver15
		Evaluate
		InstancesFromDatabase
		MakeFile
		Predict
		UtilsWeka
	AddSample package contains the following .java files: 
		Connect
		DisplayAddSample
		SampleForDiabetes
The .arff files that include:
	checkForAccuracy: contains answer key to be checked against the evaluated test results taken from the Evaluate.java class
	combined: file with all training data that were used
	combinedTest: file with all testing data that were used
	fromDatabase:file containing training data from the database after the header had been appended, which is processed in the MakeFile.java class
	fromDatabaseTest:file containing testing data from the database after the header had been appended, which is processed in the MakeFile.java class
	headerDiabetes: contains information on formatted data type and their variable names in java files and database schema	

Driver libraries 
 	Driver to MySQL 
	Driver to Weka 
>>>>>>> ed1af3935fd35a5cc3ba277ba8d29db650c18b05

<<<<<<< HEAD
\f1\b Redistribution
\f0\b0 \
Please distribute with citation: \
An, Vithia (2017). The Machine Learning Health Predictions (Version 1.0) [Source code]. {\field{\*\fldinst{HYPERLINK "http://github.com/anv2/GUI_test_train_predict_diabetes"}}{\fldrslt \cf3 \strokec3 http://github.com/anv2/GUI_test_train_predict_diabetes}}\
}
||||||| merged common ancestors
\fs28 Redistribution
\fs24 \

\b0 Please distribute with citation: \
An, Vithia (2017). The Machine Learning Health Predictions (Version 1.0) [Source code]. http://github.com/anv2/GUI_test_train_predict_diabetes\
\

\b \

\fs28 \

\b0\fs24 \
}
=======
Redistribution
Please distribute with citation: 
An, Vithia (2017). The Machine Learning Health Predictions (Version 1.0) [Source code]. http://github.com/anv2/GUI_test_train_predict_diabetes




>>>>>>> ed1af3935fd35a5cc3ba277ba8d29db650c18b05
